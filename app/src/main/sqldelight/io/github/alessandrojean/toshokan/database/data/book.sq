import android.icu.util.Currency;

CREATE TABLE Book(
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  code TEXT,
  title TEXT NOT NULL,
  volume TEXT,
  synopsis TEXT,
  notes TEXT,
  publisher_id INTEGER NOT NULL,
  group_id INTEGER NOT NULL,
  paid_price_currency TEXT AS Currency NOT NULL,
  paid_price_value REAL AS Float NOT NULL,
  label_price_currency TEXT AS Currency NOT NULL,
  label_price_value REAL AS Float NOT NULL,
  store_id INTEGER,
  bought_at INTEGER AS Long,
  is_future INTEGER AS Boolean DEFAULT 0 NOT NULL,
  cover_url TEXT,
  dimension_width REAL AS Float NOT NULL,
  dimension_height REAL AS Float NOT NULL,

  created_at INTEGER AS Long NOT NULL,
  updated_at INTEGER AS Long NOT NULL,

  is_favorite INTEGER AS Boolean DEFAULT 0,

  FOREIGN KEY (publisher_id) REFERENCES Publisher (id)
    ON DELETE CASCADE,
  FOREIGN KEY (group_id) REFERENCES BookGroup (id)
    ON DELETE CASCADE,
  FOREIGN KEY (store_id) REFERENCES Store (id)
    ON DELETE SET NULL
);

findByCode:
SELECT *
FROM Book
WHERE code = ?
LIMIT 1;

findById:
SELECT *
FROM Book
WHERE id = ?;

findByIds:
SELECT *
FROM Book
WHERE id IN ?;

findAllCodes:
SELECT code
FROM Book
WHERE code IS NOT NULL;

allTitles:
SELECT title
FROM Book
ORDER BY title COLLATE UNICODE ASC;

countGroupBooks:
SELECT count(*)
FROM Book
WHERE group_id = :groupId AND is_future = :isFuture;

groupBooks:
SELECT *
FROM Book
WHERE group_id = :groupId AND is_future = :isFuture
ORDER BY title COLLATE UNICODE ASC
LIMIT :limit OFFSET :offset;

completeBook:
SELECT Book.*,
  BookGroup.name AS group_name,
  Publisher.name AS publisher_name,
  Store.name AS store_name,
  (SELECT count(*) FROM Reading WHERE Reading.book_id = Book.id) AS reading_count,
  (SELECT max(read_at) FROM Reading WHERE Reading.book_id = Book.id) AS latest_reading
FROM Book
INNER JOIN BookGroup ON BookGroup.id = Book.group_id
INNER JOIN Publisher ON Publisher.id = Book.publisher_id
INNER JOIN Store ON Store.id = Book.store_id
WHERE Book.id = ?;

libraryItems:
SELECT Book.*, name AS group_name, sort AS group_sort
FROM Book
INNER JOIN BookGroup ON BookGroup.id = Book.group_id
WHERE is_future = :is_future
ORDER BY BookGroup.sort ASC, Book.title COLLATE UNICODE ASC;

seriesVolumes:
SELECT *
FROM Book
WHERE title LIKE (:title || '%')
  AND publisher_id = :publisherId
  AND group_id = :groupId
ORDER BY title COLLATE UNICODE ASC;

search:
SELECT *
FROM Book
WHERE
  (lower(title) LIKE ('%' || lower(:query) || '%') OR lower(code) = lower(:query) OR :query IS NULL)
  AND (:isFuture IS NULL OR is_future = :isFuture)
  AND (:isFavorite IS NULL OR is_favorite = :isFavorite)
  AND (:groupsIsEmpty OR group_id IN :groupIds)
  AND (:publishersIsEmpty OR publisher_id IN :publisherIds)
  AND (:storesIsEmpty OR store_id IN :storeIds)
  AND (:boughtAtStart IS NULL OR bought_at >= :boughtAtStart)
  AND (:boughtAtEnd IS NULL OR bought_at <= :boughtAtEnd)
  AND ((:readAtStart IS NULL OR :readAtEnd IS NULL) OR
    (SELECT count(*) FROM Reading
      WHERE Reading.book_id = Book.id
        AND (:readAtStart IS NULL OR read_at >= :readAtStart)
        AND (:readAtEnd IS NULL OR read_at <= :readAtEnd)) > 0)
  AND (:contributorsIsEmpty OR
    (SELECT count(*) FROM BookCredit
      WHERE BookCredit.book_id = Book.id
        AND BookCredit.person_id IN :contributors) > 0)
ORDER BY created_at DESC;

lastInsertedId:
SELECT max(id)
FROM Book;

statistics:
SELECT count(id) AS count,
  (SELECT sum(paid_price_value) FROM Book
    WHERE paid_price_currency = :currency
      AND is_future = 0) AS total_expense,
  (SELECT sum(label_price_value) FROM Book
    WHERE label_price_currency = :currency
    AND is_future = 0) AS real_total_expense,
  (SELECT count(DISTINCT book_id) FROM Reading) AS read_count
FROM Book
WHERE is_future = 0;

periodStatistics:
SELECT count(id) AS bought_count,
  (SELECT sum(paid_price_value) FROM Book
    WHERE paid_price_currency = :currency
      AND bought_at IS NOT NULL
      AND bought_at >= :startPeriod
      AND bought_at <= :endPeriod
      AND is_future = 0) AS total_expense,
  (SELECT count(DISTINCT book_id) FROM Reading
    WHERE read_at IS NOT NULL
      AND read_at >= :startPeriod
      AND read_at <= :endPeriod) AS read_count
FROM Book
WHERE bought_at IS NOT NULL
  AND bought_at >= :startPeriod
  AND bought_at <= :endPeriod
  AND is_future = 0;

insert:
INSERT INTO Book(
  code,
  title,
  volume,
  synopsis,
  notes,
  publisher_id,
  group_id,
  paid_price_currency,
  paid_price_value,
  label_price_currency,
  label_price_value,
  store_id,
  bought_at,
  is_future,
  cover_url,
  dimension_width,
  dimension_height,
  is_favorite,
  created_at,
  updated_at
)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?, 0, ?, ?);

update:
UPDATE Book
SET code = ?, title = ?, volume = ?, synopsis = ?, notes = ?, publisher_id = ?,
  group_id = ?, paid_price_currency = ?, paid_price_value = ?,
  label_price_currency = ?, label_price_value = ?, store_id = ?,
  bought_at = ?, is_future = ?, cover_url = ?, dimension_width = ?,
  dimension_height = ?, updated_at = ?
WHERE id = ?;

toggleFavorite:
UPDATE Book
SET is_favorite = CASE is_favorite
    WHEN 1 THEN 0
    ELSE 1
  END,
  updated_at = ?
WHERE id = ?;

clearCoverUrl:
UPDATE Book
SET cover_url = NULL
WHERE id = ?;

delete:
DELETE FROM Book
WHERE id = ?;

deleteBulk:
DELETE FROM Book
WHERE id IN ?;